---

# - name: set fact list_command
#   set_fact: list_command=""
# #If we are reinstalling all plugins, e.g. to a version change, we need to remove all plugins (inc. x-pack) to install any plugins. Otherwise we don't consider x-pack so the role stays idempotent.
# - name: set fact list_command check for x-pack
#   set_fact: list_command="| grep -vE 'x-pack'"
#   when: not ls_plugins_reinstall

# #List currently installed plugins. We have to list the directories as the list commmand fails if the KB version is different than the plugin version.
# - name: Check installed logstash plugins
#   become: yes
#   shell: "{{ls_home}}/bin/logstash-plugin list"
#   register: installed_plugins
#   changed_when: False
#   ignore_errors: yes

# #if ls_plugins_reinstall is set to true we remove ALL plugins
# - name: set fact plugins_to_remove to install_plugins.stdout_lines
#   set_fact: plugins_to_remove="{{ installed_plugins.stdout_lines | default([]) }}"
#   when: ls_plugins_reinstall

# #if the plugins listed are different than those requested, we remove those installed but not listed in the config
# - name: set fact plugins_to_remove to delete plugins installed but not listed in ls_plugins
#   set_fact: plugins_to_remove="{{ installed_plugins.stdout_lines | difference(ls_plugins | json_query('[*].plugin')) | default([]) }}"
#   when: not ls_plugins_reinstall

# #if ls_plugins_reinstall is set to true we (re)install ALL plugins
# - name: set fact plugins_to_install to ls_plugins
#   set_fact: plugins_to_install="{{ ls_plugins | json_query('[*].plugin') | default([]) }}"
#   when: ls_plugins_reinstall

#Create empty array
- name: set fact empty fact plugins_to_install
  set_fact: plugins_to_install=[]

#if the plugins listed are different than those requested, we install those not installed but listed in the config
- name: set fact to plugins_to_install to those in ls_config but not installed
  set_fact: plugins_to_install="{{ plugins_to_install }} + {{ item.plugin | default([]) }}"
  loop: ls_plugins
  when: not ls_plugins_reinstall and item in installed_plugins.stdout_lines

# # This removes any currently installed plugins (to prevent errors when reinstalling). Exception made for x-pack
# - name: Remove logstash plugins
#   become: yes
#   command: "{{ls_home}}/bin/logstash-plugin remove {{item}}"
#   ignore_errors: yes
#   with_items: "{{ plugins_to_remove | default([]) }}"
#   notify: restart logstash
#   when: not item == "x-pack"
#   register: plugin_removed
#   environment:
#     CONF_DIR: "{{ conf_dir }}"
#     ls_PATH_CONF: "{{ conf_dir }}"
#     # ls_INCLUDE: "{{ instance_default_file }}"

- name: Install logstash plugins
  become: yes
  command: "{{ls_home}}/bin/logstash-plugin install {{ item }}"
  register: plugin_installed
  failed_when: "'ERROR' in plugin_installed.stdout"
  changed_when: plugin_installed.rc == 0
  with_items: "{{ ls_plugins }}"
  when: item in plugins_to_install
  notify: restart logstash
  environment:
    CONF_DIR: "{{ conf_dir }}"
    ls_PATH_CONF: "{{ conf_dir }}"
    # ls_INCLUDE: "{{ instance_default_file }}"
    ls_JAVA_OPTS: "{% if item.proxy_host is defined and item.proxy_host != '' and item.proxy_port is defined and item.proxy_port != ''%} -Dhttp.proxyHost={{ item.proxy_host }} -Dhttp.proxyPort={{ item.proxy_port }} -Dhttps.proxyHost={{ item.proxy_host }} -Dhttps.proxyPort={{ item.proxy_port }}  {% elif ls_proxy_host is defined and ls_proxy_host != '' %} -Dhttp.proxyHost={{ ls_proxy_host }} -Dhttp.proxyPort={{ ls_proxy_port }} -Dhttps.proxyHost={{ ls_proxy_host }} -Dhttps.proxyPort={{ ls_proxy_port }} {% endif %}"
  until: plugin_installed.rc == 0
  retries: 5
  delay: 5

#Set permissions on plugins directory
- name: Set Plugin Directory Permissions
  become: yes
  file: state=directory path={{ ls_home }}/plugins owner={{ ls_user }} group={{ ls_group }} recurse=yes
