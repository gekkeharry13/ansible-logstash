# Check for mandatory parameters

# - name: fail when ls_instance is not defined
#   fail: msg="ls_instance_name must be specified and cannot be blank"
#   when: ls_instance_name is not defined or ls_instance_name == ''

- name: fail when ls_proxy_port is not defined or is blank
  fail: msg="ls_proxy_port must be specified and cannot be blank when ls_proxy_host is defined"
  when: (ls_proxy_port is not defined or ls_proxy_port == '') and (ls_proxy_host is defined and ls_proxy_host != '')

- name: debug message
  debug: msg="WARNING - It is recommended you specify the parameter 'server.port'"
  when: ls_config['server.port'] is not defined

#If the user attempts to lock memory they must specify a heap size
- name: fail when heap size is not specified when using memory lock
  fail: msg="If locking memory with bootstrap.memory_lock a heap size must be specified"
  when: ls_config['bootstrap.memory_lock'] is defined and ls_config['bootstrap.memory_lock'] == True and ls_heap_size is not defined

#Check if working with security we have an es_api_basic_auth_username and es_api_basic_auth_username - otherwise any http calls wont work
- name: fail when api credentials are not declared when using security
  fail: msg="Enabling security requires an es_api_basic_auth_username and es_api_basic_auth_password to be provided to allow cluster operations"
  when: es_api_basic_auth_username is not defined and es_api_basic_auth_password is not defined

# - name: set fact instance_init_script
#   set_fact: instance_init_script={{init_script | dirname }}/{{ls_instance_name}}_{{init_script | basename}}
# - name: set fact conf_dir
#   set_fact: conf_dir={{ ls_conf_dir }}/{{ls_instance_name}}
- name: set fact conf_dir
  set_fact: conf_dir={{ ls_conf_dir }}
# - name: set fact m_lock_enabled
#   set_fact: m_lock_enabled={{ ls_config['bootstrap.memory_lock'] is defined and ls_config['bootstrap.memory_lock'] == True }}

#Use systemd for the following distributions:
#Ubuntu 15 and up
#Debian 8 and up
#Centos 7 and up
#Relies on logstash distribution installing a serviced script to determine whether one should be copied.

- name: set fact use_system_d
  set_fact: use_system_d={{(ansible_distribution == 'Debian' and ansible_distribution_version | version_compare('8', '>=')) or (ansible_distribution in ['RedHat','CentOS'] and ansible_distribution_version | version_compare('7', '>=')) or (ansible_distribution == 'Ubuntu' and ansible_distribution_version | version_compare('15', '>=')) }}

# - name: set fact instance_sysd_script
#   set_fact: instance_sysd_script={{sysd_script | dirname }}/{{ls_instance_name}}_{{sysd_script | basename}}
#   when: use_system_d
#For directories we also use the {{inventory_hostname}}-{{ ls_instance_name }} - this helps if we have a shared SAN.

# - name: set fact instance_suffix
#   set_fact: instance_suffix={{inventory_hostname}}-{{ ls_instance_name }}
# - name: set fact pid_dir
#   set_fact: pid_dir={{ ls_pid_dir }}/{{instance_suffix}}
# - name: set fact log_dir
#   set_fact: log_dir={{ ls_log_dir }}/{{instance_suffix}}
# - name: set fact log_dir
#   set_fact: data_dirs={{ ls_data_dirs | append_to_list('/'+instance_suffix) }}
